{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gusta\\\\Documents\\\\Coding Bootcamp by MIT\\\\Module 29 - Full-Stack Restaurant App Part 2\\\\full-stack-restaurant-app_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport AppContext from './context';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from 'reactstrap';\n\nfunction RestaurantList(props) {\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query {\n    restaurants {\n      data {\n        id\n        attributes {\n          name\n          description\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  console.log(`Query Data: ${data.restaurants.data}`);\n  if (data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }\n  }, \"Not found\");\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  let restId = searchQuery[0].id; // definet renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        width: 300,\n        height: 540,\n        marginBottom: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 300,\n        width: 300\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, __jsx(CardTitle, {\n      className: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, __jsx(Link, {\n      href: `/${res.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      color: \"dark\",\n      className: \"d-block m-auto px-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \"View dishes\"))))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, restList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/gusta/Documents/Coding Bootcamp by MIT/Module 29 - Full-Stack Restaurant App Part 2/full-stack-restaurant-app_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Link","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","restaurantID","length","restList","map","width","height","marginBottom","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport { useContext, useState } from 'react';\nimport Link from 'next/link';\n\nimport AppContext from './context';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from 'reactstrap';\n\nfunction RestaurantList(props) {\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query {\n    restaurants {\n      data {\n        id\n        attributes {\n          name\n          description\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  console.log(`Query Data: ${data.restaurants.data}`);\n  if (data) return <p>Not found</p>;\n\n  let searchQuery = data.restaurants.filter((res) => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n\n  let restId = searchQuery[0].id;\n\n  // definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return <Dishes restId={restaurantID}> </Dishes>;\n  };\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col key={res.id}>\n        <Card style={{ width: 300, height: 540, marginBottom: 40 }}>\n          <CardImg\n            top={true}\n            style={{ height: 300, width: 300 }}\n            src={`http://localhost:1337` + res.image.url}\n          />\n          <CardBody>\n            <CardTitle className=\"font-weight-bold\">{res.name}</CardTitle>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Link href={`/${res.id}`}>\n              <Button\n                color=\"dark\"\n                className=\"d-block m-auto px-4\"\n              >\n                View dishes\n              </Button>\n            </Link>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n      </Container>\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}