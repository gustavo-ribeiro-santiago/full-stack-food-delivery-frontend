{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gusta\\\\Documents\\\\Coding Bootcamp by MIT\\\\Module 29 - Full-Stack Restaurant App Part 2\\\\full-stack-restaurant-app_starter\\\\components\\\\dishes.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { useState, useContext, useEffect } from 'react';\nimport AppContext from './context';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Row, Col } from 'reactstrap';\n\nfunction Dishes({\n  restId,\n  handleSetRestaurant,\n  setIsReadyToFetch,\n  isReadyToFetch\n}) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState();\n  const {\n    addItem\n  } = useContext(AppContext);\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const router = useRouter(); // const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n  //   variables: { id: restId },\n  //   skip: !isReadyToFetch,\n  //   onCompleted: (data) => {\n  //     setIsReadyToFetch(false);\n  //     handleSetRestaurant(data.restaurant);\n  //   },\n  // });\n\n  const [loadData, {\n    loading,\n    error,\n    data\n  }] = useLazyQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restId\n    }\n  });\n  useEffect(() => {\n    if (!loading && !data) {\n      loadData().then(data => handleSetRestaurant(data.restaurant)); // Execute the query manually\n    }\n  }, []);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(data); // useEffect(() => setRestaurant(data.restaurant), [])\n\n  let restaurant = data.restaurant;\n\n  if (restId > 0) {\n    return __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-between'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, restaurant.dishes.map(res => __jsx(\"div\", {\n      style: {\n        padding: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, __jsx(Card, {\n      style: {\n        width: 300,\n        height: 561,\n        margin: '0 10px 30px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 300,\n        width: 300\n      },\n      src: `http://localhost:1337${res.image.url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, __jsx(CardTitle, {\n      className: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      style: {\n        paddingLeft: 15,\n        paddingTop: 8,\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \"$\", res.price), __jsx(Button, {\n      color: \"info\",\n      outline: true,\n      color: \"dark\",\n      onClick: () => addItem(res),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, \"+ Add To Cart\"))))));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 12\n      }\n    }, \" No Dishes\");\n  }\n}\n\nexport default Dishes;","map":{"version":3,"sources":["C:/Users/gusta/Documents/Coding Bootcamp by MIT/Module 29 - Full-Stack Restaurant App Part 2/full-stack-restaurant-app_starter/components/dishes.js"],"names":["useRouter","gql","useLazyQuery","useState","useContext","useEffect","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Row","Col","Dishes","restId","handleSetRestaurant","setIsReadyToFetch","isReadyToFetch","restaurantID","setRestaurantID","addItem","GET_RESTAURANT_DISHES","router","loadData","loading","error","data","variables","id","then","restaurant","console","log","display","flexWrap","justifyContent","dishes","map","res","padding","width","height","margin","image","url","name","description","paddingLeft","paddingTop","fontWeight","price"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { useState, useContext, useEffect } from 'react';\nimport AppContext from './context';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Row,\n  Col,\n} from 'reactstrap';\nfunction Dishes({\n  restId,\n  handleSetRestaurant,\n  setIsReadyToFetch,\n  isReadyToFetch,\n}) {\n  const [restaurantID, setRestaurantID] = useState();\n  const { addItem } = useContext(AppContext);\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const router = useRouter();\n\n  // const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n  //   variables: { id: restId },\n  //   skip: !isReadyToFetch,\n  //   onCompleted: (data) => {\n  //     setIsReadyToFetch(false);\n  //     handleSetRestaurant(data.restaurant);\n  //   },\n  // });\n\n  const [loadData, { loading, error, data }] = useLazyQuery(\n    GET_RESTAURANT_DISHES,\n    {\n      variables: { id: restId },\n    }\n  );\n\n  useEffect(() => {\n    if (!loading && !data) {\n      loadData().then((data) => handleSetRestaurant(data.restaurant)); // Execute the query manually\n    }\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  console.log(data);\n  // useEffect(() => setRestaurant(data.restaurant), [])\n\n  let restaurant = data.restaurant;\n\n  if (restId > 0) {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'space-between',\n        }}\n      >\n        {restaurant.dishes.map((res) => (\n          <div style={{ padding: 0 }}>\n            <Card style={{ width: 300, height: 561, margin: '0 10px 30px' }}>\n              <CardImg\n                top={true}\n                style={{ height: 300, width: 300 }}\n                src={`http://localhost:1337${res.image.url}`}\n              />\n              <CardBody>\n                <CardTitle className=\"font-weight-bold\">{res.name}</CardTitle>\n                <CardText>{res.description}</CardText>\n              </CardBody>\n              <div\n                className=\"card-footer\"\n                style={{ display: 'flex', justifyContent: 'space-between' }}\n              >\n                <div\n                  style={{ paddingLeft: 15, paddingTop: 8, fontWeight: 'bold' }}\n                >\n                  ${res.price}\n                </div>\n                <Button\n                  color=\"info\"\n                  outline\n                  color=\"dark\"\n                  onClick={() => addItem(res)}\n                >\n                  + Add To Cart\n                </Button>\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <h1> No Dishes</h1>;\n  }\n}\nexport default Dishes;\n"]},"metadata":{},"sourceType":"module"}