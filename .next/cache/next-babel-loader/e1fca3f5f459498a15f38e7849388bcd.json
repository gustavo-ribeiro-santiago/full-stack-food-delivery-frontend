{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gusta\\\\Documents\\\\Coding Bootcamp by MIT\\\\Module 29 - Full-Stack Restaurant App Part 2\\\\full-stack-restaurant-app_starter\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    restaurants {\\n      data {\\n        id\\n        attributes {\\n          name\\n          description\\n          image {\\n            data {\\n              attributes {\\n                url\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport AppContext from './context';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from 'reactstrap';\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState = useState(cart),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants.data[0].attributes.name));\n  var searchQuery = data.restaurants.data.filter(function (res) {\n    return res.attributes.name.toLowerCase().includes(props.search);\n  });\n  var restId = searchQuery[0].id; // definet renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          width: 300,\n          height: 540,\n          marginBottom: 40\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 300,\n          width: 300\n        },\n        src: \"http://localhost:1337\" + res.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, __jsx(CardTitle, {\n        className: \"font-weight-bold\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, res.name), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, __jsx(Link, {\n        href: \"/\".concat(res.id),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        color: \"dark\",\n        className: \"d-block m-auto px-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      }, \"View dishes\")))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, restList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"UVx8QG13KxGG5sUE9JDdHLXEwCY=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/gusta/Documents/Coding Bootcamp by MIT/Module 29 - Full-Stack Restaurant App Part 2/full-stack-restaurant-app_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Link","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","attributes","name","searchQuery","filter","res","toLowerCase","includes","search","restId","id","renderDishes","restaurantID","length","restList","map","width","height","marginBottom","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport { useContext, useState } from 'react';\nimport Link from 'next/link';\n\nimport AppContext from './context';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from 'reactstrap';\n\nfunction RestaurantList(props) {\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query {\n    restaurants {\n      data {\n        id\n        attributes {\n          name\n          description\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants.data[0].attributes.name}`);\n\n  let searchQuery = data.restaurants.data.filter((res) => {\n    return res.attributes.name.toLowerCase().includes(props.search);\n  });\n\n  let restId = searchQuery[0].id;\n\n  // definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return <Dishes restId={restaurantID}> </Dishes>;\n  };\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col key={res.id}>\n        <Card style={{ width: 300, height: 540, marginBottom: 40 }}>\n          <CardImg\n            top={true}\n            style={{ height: 300, width: 300 }}\n            src={`http://localhost:1337` + res.image.url}\n          />\n          <CardBody>\n            <CardTitle className=\"font-weight-bold\">{res.name}</CardTitle>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Link href={`/${res.id}`}>\n              <Button\n                color=\"dark\"\n                className=\"d-block m-auto px-4\"\n              >\n                View dishes\n              </Button>\n            </Link>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n      </Container>\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}